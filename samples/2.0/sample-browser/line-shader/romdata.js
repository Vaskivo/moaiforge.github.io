romJson={"files": [{"start": 0, "end": 6028, "filename": "/main.lua"}, {"start": 6028, "end": 6429, "filename": "/shader.fsh"}, {"start": 6429, "end": 10192, "filename": "/shader.vsh"}], "directories": {}, "package_uuid": "fd2908c6aae0b0d4996a13cf9947987c"};
romData="";